{"version":3,"sources":["components/AutocompleteInput.js","containers/GoogleMap.js","containers/FormContainer.js","App.js","serviceWorker.js","stores/addressStore.js","index.js"],"names":["autoComplete","GoogleMap","calculateAndDisplayRoute","places","waypts","forEach","place","push","location","stopover","directionsService","route","origin","destination","length","waypoints","optimizeWaypoints","travelMode","response","status","directionsRenderer","setDirections","window","alert","addressStore","this","props","addresses","id","google","maps","DirectionsService","DirectionsRenderer","map","Map","document","getElementById","options","setMap","React","Component","inject","observer","handleScriptLoad","updateQuery","autoCompleteRef","Autocomplete","current","types","componentRestrictions","country","setFields","addListener","handlePlaceSelect","a","addressObject","getPlace","query","geometry","lat","lng","formatted_address","useState","setQuery","useRef","useEffect","add","ref","type","onChange","event","target","value","placeholder","styleForm","marginTop","width","style","float","height","display","flexDirection","alignItems","justifyContent","Form","inverted","Field","address","index","key","Button","onClick","remove","labelPosition","icon","fluid","content","App","loadingComponent","scripts","process","center","zoom","mapTypeId","Boolean","hostname","match","find","splice","decorate","observable","action","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yNAGMA,E,qGCAAC,E,4MA6BJC,yBAA2B,SAACC,GAC1B,IAAIC,EAAS,GACbD,EAAOE,SAAQ,SAAAC,GACbF,EAAOG,KAAK,CACVC,SAAUF,EAAME,SAChBC,UAAU,OAId,EAAKC,kBAAkBC,MAAM,CAC3BC,OAAQT,EAAO,GAAGK,SAClBK,YAAaV,EAAOA,EAAOW,OAAS,GAAGN,SACvCO,UAAWX,EACXY,mBAAmB,EACnBC,WAAY,YACX,SAACC,EAAUC,GACG,OAAXA,EACF,EAAKC,mBAAmBC,cAAcH,GActCI,OAAOC,MAAM,oCAAsCJ,O,uDArD/C,IACAK,EAAiBC,KAAKC,MAAtBF,aAIR,OAHGA,EAAaG,UAAUb,OAAS,GACjCW,KAAKvB,yBAAyBsB,EAAaG,WAG3C,yBAAKC,GAAG,U,0CAKVH,KAAKf,kBAAoB,IAAIY,OAAOO,OAAOC,KAAKC,kBAChDN,KAAKL,mBAAqB,IAAIE,OAAOO,OAAOC,KAAKE,mBACjDP,KAAKQ,IAAM,IAAIX,OAAOO,OAAOC,KAAKI,IAAIC,SAASC,eAAe,OAAnD,eACNX,KAAKC,MAAMW,UAGhBZ,KAAKL,mBAAmBkB,OAAOb,KAAKQ,S,GAxBhBM,IAAMC,WAmEfC,eAAO,kBAAuB,CAAEjB,aAAzB,EAAGA,gBAAViB,CAAiDC,YAASzC,I,qDDjEvE,SAAS0C,EAAiBC,EAAaC,IACrC7C,EAAe,IAAIsB,OAAOO,OAAOC,KAAK3B,OAAO2C,aAC3CD,EAAgBE,QAChB,CAAEC,MAAO,GAAIC,sBAAuB,CAAEC,QAAS,SAEpCC,UAAU,CAAC,WAAY,sBACpCnD,EAAaoD,YAAY,iBAAiB,kB,2CACxCC,CAAkBT,M,4CAItB,WAAiCA,GAAjC,iBAAAU,EAAA,sDACQC,EAAgBvD,EAAawD,WAC7BC,EAAQ,CACZ7B,IAAK2B,EAAcG,SAASlD,SAASmD,QAASJ,EAAcG,SAASlD,SAASoD,MAC9EC,kBAAmBN,EAAcM,kBACjCF,IAAKJ,EAAcG,SAASlD,SAASmD,MACrCC,IAAKL,EAAcG,SAASlD,SAASoD,MACrCpD,SAAU+C,EAAcG,SAASlD,UAEnCoC,EAAYa,GATd,4C,sBA6BahB,mBAAO,kBAAuB,CAAEjB,aAAzB,EAAGA,gBAAViB,EAhBb,YAA4C,IAAhBjB,EAAe,EAAfA,aAAe,EACnBsC,mBAAS,IAArBC,EAD+B,oBAEjClB,EAAkBmB,iBAAO,MAIjC,OAFAC,qBAAU,kBAAMtB,EAAiBnB,EAAa0C,IAAKrB,KAAkB,CAACrB,IAGpE,2BACE2C,IAAKtB,EACLuB,KAAK,SACLC,SAAU,SAAAC,GAAK,OAAIP,EAASO,EAAMC,OAAOC,QACzCC,YAAY,wBEQLhC,eAAO,kBAAuB,CAAEjB,aAAzB,EAAGA,gBAAViB,CAAiDC,aA3CtC,SAAC,GAAsB,IAApBlB,EAAmB,EAAnBA,aAWfkD,EAAY,CACdC,UAAW,OACXC,MAAO,OAGX,OACA,yBAAKC,MAhBsB,CACvBC,MAAO,OACPF,MAAO,MACPG,OAAQ,OACRC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,eAAgB,WAUhB,kBAACC,EAAA,EAAD,CAAMP,MAAOH,EAAWW,UAAQ,GAC5B,kBAACD,EAAA,EAAKE,MAAN,KACI,iDACA,kBAAC,EAAD,QAGR,kBAACF,EAAA,EAAD,CAAMP,MAAOH,EAAWW,UAAQ,GAC3B7D,EAAaG,UAAUM,KAAI,SAACsD,EAASC,GAAV,OACxB,kBAACJ,EAAA,EAAKE,MAAN,CAAYG,IAAKF,EAAQ3D,IACrB,kBAAC8D,EAAA,EAAD,CACAC,QAAS,kBAAMnE,EAAaoE,OAAOJ,IACnCK,cAAc,QACdC,KAAK,QACLC,OAAK,EACLC,QAAST,EAAQ1B,kBACjBwB,UAAQ,c,SCVjBY,MAtBf,WACE,OACE,yBAAKrE,GAAG,iBACN,kBAAC,IAAD,CACAsE,iBACI,uDAEJC,QAAS,CAAC,+CAAD,OAAgDC,0CAAhD,iDAEP,kBAAC,EAAD,MAEE,kBAAC,EAAD,CAAW/D,QAAS,CAClBgE,OAAQ,CAAC1C,IAAK,GAAIC,KAAM,IAExB0C,KAAM,EACNC,UAAW,gBCTHC,QACW,cAA7BlF,OAAOd,SAASiG,UAEe,UAA7BnF,OAAOd,SAASiG,UAEhBnF,OAAOd,SAASiG,SAASC,MACvB,2D,YChBAlF,E,iDACJG,UAAY,G,KAEZuC,IAAM,SAACqB,GACD,EAAK5D,UAAUgF,MAAK,SAAA5D,GAAO,OAAIA,EAAQnB,KAAO2D,EAAQ3D,OACxD,EAAKD,UAAUpB,KAAKgF,I,KAIxBK,OAAS,SAACJ,GACR,EAAK7D,UAAUiF,OAAOpB,EAAO,KAIjCqB,YAASrF,EAAc,CACrBG,UAAWmF,IACX5C,IAAK6C,IACLnB,OAAQmB,MAGKvF,QCbfwF,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAU1F,aAAc,IAAIA,GAC1B,kBAAC,EAAD,QAGJW,SAASC,eAAe,SFoHpB,kBAAmB+E,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.43813974.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { inject } from 'mobx-react'\n\n  let autoComplete;\n\n  function handleScriptLoad(updateQuery, autoCompleteRef) {\n    autoComplete = new window.google.maps.places.Autocomplete(\n      autoCompleteRef.current, \n      { types: [], componentRestrictions: { country: \"us\" } }\n    );\n    autoComplete.setFields([\"geometry\", \"formatted_address\"]);\n    autoComplete.addListener(\"place_changed\", () =>\n      handlePlaceSelect(updateQuery)\n    );\n  }\n  \n  async function handlePlaceSelect(updateQuery) {\n    const addressObject = autoComplete.getPlace();\n    const query = {\n      id: +addressObject.geometry.location.lat() + +addressObject.geometry.location.lng(),\n      formatted_address: addressObject.formatted_address, \n      lat: addressObject.geometry.location.lat(),\n      lng: addressObject.geometry.location.lng(),\n      location: addressObject.geometry.location\n    };\n    updateQuery(query);\n    //console.log(query);\n  }\n\n  function AutocompleteInput({addressStore}) {\n      const [,setQuery] = useState(\"\");\n      const autoCompleteRef = useRef(null);\n\n    useEffect(() => handleScriptLoad(addressStore.add, autoCompleteRef), [addressStore]);\n\n    return (\n      <input\n        ref={autoCompleteRef}\n        type=\"search\"\n        onChange={event => setQuery(event.target.value)}\n        placeholder=\"Enter an address\"\n      />\n    );\n  }\n\nexport default inject(({ addressStore }) => ({ addressStore }))(AutocompleteInput);\n","import React from 'react';\nimport { observer, inject } from 'mobx-react';\n\nclass GoogleMap extends React.Component {\n  map;\n  directionsService;\n  directionsRenderer;\n  infowindow;\n\n\n  render() {\n    const { addressStore } = this.props\n    if(addressStore.addresses.length > 0) {\n      this.calculateAndDisplayRoute(addressStore.addresses)\n    }\n    return (\n      <div id=\"map\" />\n    );\n  }\n\n  componentDidMount() {\n    this.directionsService = new window.google.maps.DirectionsService();\n    this.directionsRenderer = new window.google.maps.DirectionsRenderer();\n    this.map = new window.google.maps.Map(document.getElementById('map'), {\n      ...this.props.options\n    });\n\n    this.directionsRenderer.setMap(this.map);\n\n    //this.infowindow  = window.google.maps.InfoWindow();\n  }\n\n  calculateAndDisplayRoute = (places) => {\n    let waypts = [];\n    places.forEach(place => {\n      waypts.push({\n        location: place.location,\n        stopover: true\n      }) \n    });\n\n    this.directionsService.route({\n      origin: places[0].location,\n      destination: places[places.length - 1].location,\n      waypoints: waypts,\n      optimizeWaypoints: true,\n      travelMode: 'DRIVING'\n    }, (response, status) => {\n      if (status === 'OK') {\n        this.directionsRenderer.setDirections(response);\n        // var route = response.routes[0];\n        // var summaryPanel = document.getElementById('directions-panel');\n        // summaryPanel.innerHTML = '';\n        // For each route, display summary information.\n        // for (var i = 0; i < route.legs.length; i++) {\n        //   var routeSegment = i + 1;\n        //   summaryPanel.innerHTML += '<b>Route Segment: ' + routeSegment +\n        //       '</b><br>';\n        //   summaryPanel.innerHTML += route.legs[i].start_address + ' to ';\n        //   summaryPanel.innerHTML += route.legs[i].end_address + '<br>';\n        //   summaryPanel.innerHTML += route.legs[i].distance.text + '<br><br>';\n        // }\n      } else {\n        window.alert('Directions request failed due to ' + status);\n      }\n    });\n  }\n\n}\n\nexport default inject(({ addressStore }) => ({ addressStore }))(observer(GoogleMap))\n","import { Form, Button } from 'semantic-ui-react'\nimport React from 'react';\nimport AutocompleteInput from '../components/AutocompleteInput';\nimport { inject, observer } from 'mobx-react';\n\n    const FormContainer = ({ addressStore }) => {\n        const styleFormContainer = {\n            float: 'left',\n            width: '40%',\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            justifyContent: 'center'\n        }\n    \n        const styleForm = {\n            marginTop: '50px',\n            width: '90%'\n        }\n\n        return (\n        <div style={styleFormContainer}>\n            <Form style={styleForm} inverted>\n                <Form.Field>\n                    <label>Search Address</label>\n                    <AutocompleteInput/>\n                </Form.Field>\n            </Form>\n            <Form style={styleForm} inverted>\n                {addressStore.addresses.map((address, index) => (\n                    <Form.Field key={address.id}>\n                        <Button \n                        onClick={() => addressStore.remove(index)}\n                        labelPosition='right' \n                        icon='times'\n                        fluid\n                        content={address.formatted_address} \n                        inverted/>\n                    </Form.Field>\n                    \n                ))}\n            </Form>\n        </div>\n        )\n    }\n\n\nexport default inject(({ addressStore }) => ({ addressStore }))(observer(FormContainer))","import React from 'react';\nimport './App.css';\nimport GoogleMap from './containers/GoogleMap';\nimport FormContainer from './containers/FormContainer';\nimport ReactDependentScript from 'react-dependent-script';\n\nfunction App() {\n  return (\n    <div id='mainContainer'>\n      <ReactDependentScript \n      loadingComponent={\n          <div>Google Maps loading...</div>\n        }\n      scripts={[`https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAPS_APIKEY}&v=3&libraries=places&language=en&region=US`]}\n      >\n        <FormContainer/>\n        \n          <GoogleMap options={{\n            center: {lat: 39, lng: -95},\n            //center: {lat: 8.64, lng: -80.98},\n            zoom: 5,\n            mapTypeId: 'roadmap',\n          }}/>\n      </ReactDependentScript>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { observable, action, decorate } from 'mobx';\n\nclass addressStore {\n  addresses = []\n\n  add = (address) => {\n    if(!this.addresses.find(current => current.id === address.id)){\n      this.addresses.push(address)\n    }\n  }\n\n  remove = (index) => {\n    this.addresses.splice(index, 1)\n  }\n}\n\ndecorate(addressStore, {\n  addresses: observable,\n  add: action,\n  remove: action\n})\n\nexport default addressStore","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'mobx-react';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport addressStore from './stores/addressStore';\n// import 'mobx-react-lite/batchingForReactDom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider addressStore={new addressStore()}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n      \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}