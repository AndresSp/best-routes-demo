{"version":3,"sources":["containers/AutocompleteInput.js","containers/GoogleMap.js","components/AddressItem.js","containers/FormContainer.js","App.js","serviceWorker.js","stores/addressStore.js","index.js"],"names":["autoComplete","GoogleMap","calculateAndDisplayRoute","places","waypts","forEach","place","push","location","stopover","directionsService","route","origin","destination","length","waypoints","optimizeWaypoints","travelMode","response","status","directionsRenderer","setDirections","window","alert","addressStore","this","props","addresses","id","google","maps","DirectionsService","DirectionsRenderer","map","Map","document","getElementById","options","setMap","React","Component","inject","observer","handleScriptLoad","updateQuery","autoCompleteRef","Autocomplete","current","types","componentRestrictions","country","setFields","addListener","handlePlaceSelect","a","addressObject","getPlace","query","geometry","lat","lng","formatted_address","useState","setQuery","useRef","useEffect","add","ref","type","onChange","event","target","value","placeholder","index","arr","key","draggableId","String","provided","snapshot","Ref","innerRef","List","Item","draggableProps","dragHandleProps","style","isDragging","draggableStyle","userSelect","borderRadius","padding","background","Content","floated","Button","onClick","remove","icon","inverted","verticalAlign","Header","Description","styleFormContainer","float","width","height","overflow","display","flexDirection","alignItems","justifyContent","styleForm","marginTop","FormContainer","onDragEnd","result","reorder","source","state","Form","Field","droppableId","divided","droppableProps","isDraggingOver","App","loadingComponent","scripts","process","center","zoom","mapTypeId","Boolean","hostname","match","address","find","list","startIndex","endIndex","Array","from","splice","removed","decorate","observable","action","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yNAGMA,E,iGCAAC,E,4MA0BJC,yBAA2B,SAACC,GAC1B,IAAIC,EAAS,GACbD,EAAOE,SAAQ,SAAAC,GACbF,EAAOG,KAAK,CACVC,SAAUF,EAAME,SAChBC,UAAU,OAId,EAAKC,kBAAkBC,MAAM,CAC3BC,OAAQT,EAAO,GAAGK,SAClBK,YAAaV,EAAOA,EAAOW,OAAS,GAAGN,SACvCO,UAAWX,EACXY,mBAAmB,EACnBC,WAAY,YACX,SAACC,EAAUC,GACG,OAAXA,EACF,EAAKC,mBAAmBC,cAAcH,GAEtCI,OAAOC,MAAM,oCAAsCJ,O,uDAtC/C,IACAK,EAAiBC,KAAKC,MAAtBF,aAIR,OAHGA,EAAaG,UAAUb,OAAS,GACjCW,KAAKvB,yBAAyBsB,EAAaG,WAG3C,yBAAKC,GAAG,U,0CAKVH,KAAKf,kBAAoB,IAAIY,OAAOO,OAAOC,KAAKC,kBAChDN,KAAKL,mBAAqB,IAAIE,OAAOO,OAAOC,KAAKE,mBACjDP,KAAKQ,IAAM,IAAIX,OAAOO,OAAOC,KAAKI,IAAIC,SAASC,eAAe,OAAnD,eACNX,KAAKC,MAAMW,UAEhBZ,KAAKL,mBAAmBkB,OAAOb,KAAKQ,S,GAvBhBM,IAAMC,WAoDfC,eAAO,kBAAuB,CAAEjB,aAAzB,EAAGA,gBAAViB,CAAiDC,YAASzC,I,8DDlDvE,SAAS0C,EAAiBC,EAAaC,IACrC7C,EAAe,IAAIsB,OAAOO,OAAOC,KAAK3B,OAAO2C,aAC3CD,EAAgBE,QAChB,CAAEC,MAAO,GAAIC,sBAAuB,CAAEC,QAAS,SAEpCC,UAAU,CAAC,WAAY,sBACpCnD,EAAaoD,YAAY,iBAAiB,kB,2CACxCC,CAAkBT,M,4CAItB,WAAiCA,GAAjC,iBAAAU,EAAA,sDACQC,EAAgBvD,EAAawD,WAC7BC,EAAQ,CACZ7B,IAAK2B,EAAcG,SAASlD,SAASmD,QAASJ,EAAcG,SAASlD,SAASoD,MAC9EC,kBAAmBN,EAAcM,kBACjCF,IAAKJ,EAAcG,SAASlD,SAASmD,MACrCC,IAAKL,EAAcG,SAASlD,SAASoD,MACrCpD,SAAU+C,EAAcG,SAASlD,UAEnCoC,EAAYa,GATd,4C,sBA6BahB,mBAAO,kBAAuB,CAAEjB,aAAzB,EAAGA,gBAAViB,EAhBb,YAA4C,IAAhBjB,EAAe,EAAfA,aAAe,EACnBsC,mBAAS,IAArBC,EAD+B,oBAEjClB,EAAkBmB,iBAAO,MAIjC,OAFAC,qBAAU,kBAAMtB,EAAiBnB,EAAa0C,IAAKrB,KAAkB,CAACrB,IAGpE,2BACE2C,IAAKtB,EACLuB,KAAK,SACLC,SAAU,SAAAC,GAAK,OAAIP,EAASO,EAAMC,OAAOC,QACzCC,YAAY,wB,iBEeLhC,mBAAO,kBAAuB,CAAEjB,aAAzB,EAAGA,gBAAViB,CAAiDC,aArChE,YAAsC,IAAhBlB,EAAe,EAAfA,aACpB,OACEA,EAAaG,UAAUM,KAAI,SAACiC,EAAKQ,EAAOC,GAAb,OACvB,kBAAC,IAAD,CAAWC,IAAKV,EAAItC,GAAIiD,YAAaC,OAAOZ,EAAItC,IAAK8C,MAAOA,IACvD,SAACK,EAAUC,GAAX,OACG,kBAACC,EAAA,EAAD,CAAKC,SAAUH,EAASG,UACpB,kBAACC,EAAA,EAAKC,KAAN,iBACIL,EAASM,eACTN,EAASO,gBAFb,CAIAC,OAtBEC,EAuBFR,EAASQ,WAvBKC,EAwBdV,EAASM,eAAeE,MAxBvB,aAEjBG,WAAY,OACZC,aAAc,MACdC,QAAS,MAETC,WAAYL,EAAa,WAAa,eAGnCC,MAiBiB,kBAACN,EAAA,EAAKW,QAAN,CAAcC,QAAQ,SAClB,kBAACC,EAAA,EAAD,CACAC,QAAS,kBAAMzE,EAAa0E,OAAOxB,IACnCyB,KAAK,QACLC,UAAQ,KAEZ,kBAACjB,EAAA,EAAKW,QAAN,CAAcO,cAAc,UACxB,kBAAClB,EAAA,EAAKmB,OAAN,KACe,IAAV5B,EAAc,WAAa,GAC3BA,IAAWC,EAAI7D,OAAS,EAAK,gBAAkB,IAEpD,kBAACqE,EAAA,EAAKoB,YAAN,KACKrC,EAAIL,sBAtChB,IAAC2B,EAAYC,YCQpBe,EAAqB,CACvBC,MAAO,OACPC,MAAO,MACPC,OAAQ,QACRC,SAAU,OACVC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,eAAgB,UAGdC,EAAY,CACdC,UAAW,OACXR,MAAO,OAUbS,E,kDACF,WAAYzF,GAAQ,IAAD,8BACf,cAAMA,IAQV0F,UAAY,SAACC,GAAY,IACb7F,EAAiB,EAAKE,MAAtBF,aAEH6F,EAAOxG,aAIZW,EAAa8F,QACT9F,EAAaG,UACb0F,EAAOE,OAAO7C,MACd2C,EAAOxG,YAAY6D,QAhBvB,EAAK8C,MAAQ,CACT7F,UAAW,EAAKD,MAAMF,aAAaG,WAJxB,E,qDAuBf,OACI,kBAAC,IAAD,CAAiByF,UAAW3F,KAAK2F,WACjC,yBAAK7B,MAAOiB,GACR,kBAACiB,EAAA,EAAD,CAAMlC,MAAO0B,EAAWb,UAAQ,GAC5B,kBAACqB,EAAA,EAAKC,MAAN,KACI,iDACA,kBAAC,EAAD,QAGJ,kBAAC,IAAD,CAAWC,YAAY,cAClB,SAAC5C,EAAUC,GAAX,OACG,kBAACC,EAAA,EAAD,CAAKC,SAAUH,EAASG,UACpB,kBAACC,EAAA,EAAD,eAAMyC,SAAO,EAACvB,cAAc,UACxBtB,EAAS8C,eADb,CAEAtC,OAA0BP,EAAS8C,eA7CV,CAC7CZ,UAAW,OACXR,MAAO,MAEPd,QAAS,UAyC+DQ,UAAQ,IACxD,kBAAC,EAAD,CAAarB,SAAUA,EAAUC,SAAUA,IAC1CD,EAASN,uB,GAxClBlC,IAAMC,WAoDnBC,eAAO,kBAAuB,CAAEjB,aAAzB,EAAGA,gBAAViB,CAAiDC,YAASyE,I,SC7D1DY,MAtBf,WACE,OACE,yBAAKnG,GAAG,iBACN,kBAAC,IAAD,CACAoG,iBACI,uDAEJC,QAAS,CAAC,+CAAD,OAAgDC,0CAAhD,iDAEP,kBAAC,EAAD,MAEE,kBAAC,EAAD,CAAW7F,QAAS,CAClB8F,OAAQ,CAACxE,IAAK,GAAIC,KAAM,IAExBwE,KAAM,EACNC,UAAW,gBCTHC,QACW,cAA7BhH,OAAOd,SAAS+H,UAEe,UAA7BjH,OAAOd,SAAS+H,UAEhBjH,OAAOd,SAAS+H,SAASC,MACvB,2D,YChBAhH,E,iDACJG,UAAY,G,KAEZuC,IAAM,SAACuE,GACD,EAAK9G,UAAU+G,MAAK,SAAA3F,GAAO,OAAIA,EAAQnB,KAAO6G,EAAQ7G,OACxD,EAAKD,UAAUpB,KAAKkI,I,KAIxBnB,QAAU,SAACqB,EAAMC,EAAYC,GAC3B,IAAMxB,EAASyB,MAAMC,KAAKJ,GADc,EAEtBtB,EAAO2B,OAAOJ,EAAY,GAArCK,EAFiC,oBAGxC5B,EAAO2B,OAAOH,EAAU,EAAGI,GAE3B,EAAKtH,UAAY0F,G,KAGnBnB,OAAS,SAACxB,GACR,EAAK/C,UAAUqH,OAAOtE,EAAO,KAIjCwE,mBAAS1H,EAAc,CACrBG,UAAWwH,aACXjF,IAAKkF,SACL9B,QAAS8B,SACTlD,OAAQkD,WAGK5H,Q,OCtBf6H,IAASC,OACP,kBAAC,IAAD,CAAU9H,aAAc,IAAIA,GAC1B,kBAAC,EAAD,OAEFW,SAASC,eAAe,SFsHpB,kBAAmBmH,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a8759b9e.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { inject } from 'mobx-react'\n\n  let autoComplete;\n\n  function handleScriptLoad(updateQuery, autoCompleteRef) {\n    autoComplete = new window.google.maps.places.Autocomplete(\n      autoCompleteRef.current, \n      { types: [], componentRestrictions: { country: \"us\" } }\n    );\n    autoComplete.setFields([\"geometry\", \"formatted_address\"]);\n    autoComplete.addListener(\"place_changed\", () =>\n      handlePlaceSelect(updateQuery)\n    );\n  }\n  \n  async function handlePlaceSelect(updateQuery) {\n    const addressObject = autoComplete.getPlace();\n    const query = {\n      id: +addressObject.geometry.location.lat() + +addressObject.geometry.location.lng(),\n      formatted_address: addressObject.formatted_address, \n      lat: addressObject.geometry.location.lat(),\n      lng: addressObject.geometry.location.lng(),\n      location: addressObject.geometry.location\n    };\n    updateQuery(query);\n    //console.log(query);\n  }\n\n  function AutocompleteInput({addressStore}) {\n      const [,setQuery] = useState(\"\");\n      const autoCompleteRef = useRef(null);\n\n    useEffect(() => handleScriptLoad(addressStore.add, autoCompleteRef), [addressStore]);\n\n    return (\n      <input\n        ref={autoCompleteRef}\n        type=\"search\"\n        onChange={event => setQuery(event.target.value)}\n        placeholder=\"Enter an address\"\n      />\n    );\n  }\n\nexport default inject(({ addressStore }) => ({ addressStore }))(AutocompleteInput);\n","import React from 'react';\nimport { observer, inject } from 'mobx-react';\n\nclass GoogleMap extends React.Component {\n  map;\n  directionsService;\n  directionsRenderer;\n  infowindow;\n\n\n  render() {\n    const { addressStore } = this.props\n    if(addressStore.addresses.length > 0) {\n      this.calculateAndDisplayRoute(addressStore.addresses)\n    }\n    return (\n      <div id=\"map\" />\n    );\n  }\n\n  componentDidMount() {\n    this.directionsService = new window.google.maps.DirectionsService();\n    this.directionsRenderer = new window.google.maps.DirectionsRenderer();\n    this.map = new window.google.maps.Map(document.getElementById('map'), {\n      ...this.props.options\n    });\n    this.directionsRenderer.setMap(this.map);\n  }\n\n  calculateAndDisplayRoute = (places) => {\n    let waypts = [];\n    places.forEach(place => {\n      waypts.push({\n        location: place.location,\n        stopover: true\n      }) \n    });\n\n    this.directionsService.route({\n      origin: places[0].location,\n      destination: places[places.length - 1].location,\n      waypoints: waypts,\n      optimizeWaypoints: true,\n      travelMode: 'DRIVING'\n    }, (response, status) => {\n      if (status === 'OK') {\n        this.directionsRenderer.setDirections(response);\n      } else {\n        window.alert('Directions request failed due to ' + status);\n      }\n    });\n  }\n\n}\n\nexport default inject(({ addressStore }) => ({ addressStore }))(observer(GoogleMap))\n","\nimport React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { Button, List, Ref } from 'semantic-ui-react';\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n    // some basic styles to make the items look a bit nicer\n    userSelect: \"none\",\n    borderRadius: '4px',\n    padding: '4px',\n    // change background colour if dragging\n    background: isDragging ? \"darkblue\" : \"transparent\",\n  \n    // styles we need to apply on draggables\n    ...draggableStyle\n  });\n\nfunction AddressItem({addressStore}) {\n  return (\n    addressStore.addresses.map((add, index, arr) => (\n        <Draggable key={add.id} draggableId={String(add.id)} index={index}>\n            {(provided, snapshot) => (\n                <Ref innerRef={provided.innerRef}>\n                    <List.Item \n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n\n                    style={getItemStyle(\n                    snapshot.isDragging,\n                    provided.draggableProps.style\n                    )}>\n                        <List.Content floated='right'>\n                            <Button \n                            onClick={() => addressStore.remove(index)}\n                            icon='times'\n                            inverted></Button>\n                        </List.Content>\n                        <List.Content verticalAlign='middle'>\n                            <List.Header>\n                                {index === 0 ? '(Origin)' : ''}\n                                {index === (arr.length - 1) ? '(Destination)' : ''}\n                            </List.Header>\n                            <List.Description>\n                                {add.formatted_address}\n                            </List.Description>\n                        </List.Content>\n                    </List.Item>\n                </Ref>\n            )}\n        </Draggable>\n    ))\n  );\n}\n\nexport default inject(({ addressStore }) => ({ addressStore }))(observer(AddressItem))","import { List, Form, Ref } from 'semantic-ui-react'\nimport React from 'react';\nimport AutocompleteInput from './AutocompleteInput';\nimport { inject, observer } from 'mobx-react';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport AddressItem from '../components/AddressItem';\n\n    // const getItems = count =>\n    // Array.from({ length: count }, (v, k) => k).map(k => ({\n    //     id: `item-${k}`,\n    //     content: `item ${k}`\n    // }));\n\n    //({ addressStore })\n        const styleFormContainer = {\n            float: 'left',\n            width: '40%',\n            height: '100vh',\n            overflow: 'auto',\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            justifyContent: 'center'\n        }\n    \n        const styleForm = {\n            marginTop: '50px',\n            width: '90%',\n        }\n\n        const droppableStyleForm = (isDraggingOver) =>  ({\n            marginTop: '50px',\n            width: '90%',\n            //background: isDraggingOver ? \"lightblue\" : \"transparent\",\n            padding: '8px 0'\n        })\n\nclass FormContainer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            addresses: this.props.addressStore.addresses\n        };\n        //this.onDragEnd = this.onDragEnd.bind(this);\n    }\n    \n    onDragEnd = (result) => {\n        const { addressStore } = this.props\n        // dropped outside the list\n        if (!result.destination) {\n          return;\n        }\n    \n        addressStore.reorder(\n            addressStore.addresses,\n            result.source.index,\n            result.destination.index)\n      }\n\n    render() {\n        return (\n            <DragDropContext onDragEnd={this.onDragEnd}>\n            <div style={styleFormContainer}>\n                <Form style={styleForm} inverted>\n                    <Form.Field>\n                        <label>Search Address</label>\n                        <AutocompleteInput/>\n                    </Form.Field>\n                </Form>\n                    <Droppable droppableId=\"droppable\">\n                        {(provided, snapshot) => (\n                            <Ref innerRef={provided.innerRef}>\n                                <List divided verticalAlign='middle'\n                                {...provided.droppableProps}\n                                style={droppableStyleForm(snapshot.isDraggingOver)} inverted>\n                                    <AddressItem provided={provided} snapshot={snapshot} />\n                                    {provided.placeholder}\n                                </List>\n                            </Ref>\n                        )}\n                    </Droppable>\n            </div>\n        </DragDropContext>\n        )\n    }\n}\n\n\nexport default inject(({ addressStore }) => ({ addressStore }))(observer(FormContainer))","import React from 'react';\nimport './App.css';\nimport GoogleMap from './containers/GoogleMap';\nimport FormContainer from './containers/FormContainer';\nimport ReactDependentScript from 'react-dependent-script';\n\nfunction App() {\n  return (\n    <div id='mainContainer'>\n      <ReactDependentScript \n      loadingComponent={\n          <div>Google Maps loading...</div>\n        }\n      scripts={[`https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAPS_APIKEY}&v=3&libraries=places&language=en&region=US`]}\n      >\n        <FormContainer/>\n        \n          <GoogleMap options={{\n            center: {lat: 39, lng: -95},\n            //center: {lat: 8.64, lng: -80.98},\n            zoom: 5,\n            mapTypeId: 'roadmap',\n          }}/>\n      </ReactDependentScript>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { observable, action, decorate } from 'mobx';\n\nclass addressStore {\n  addresses = []\n\n  add = (address) => {\n    if(!this.addresses.find(current => current.id === address.id)){\n      this.addresses.push(address)\n    }\n  }\n\n  reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n  \n    this.addresses = result\n  }\n\n  remove = (index) => {\n    this.addresses.splice(index, 1)\n  }\n}\n\ndecorate(addressStore, {\n  addresses: observable,\n  add: action,\n  reorder: action,\n  remove: action\n})\n\nexport default addressStore","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'mobx-react';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport addressStore from './stores/addressStore';\nimport 'mobx-react-lite/batchingForReactDom';\n\nReactDOM.render(\n  <Provider addressStore={new addressStore()}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n      \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}